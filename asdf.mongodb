// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('mongodbVSCodePlaygroundDB');

use('FoodOrderDB')

use FoodOrderDB

use test
show collections

db.collection.insertOne(
   {'ProductName':'Pasteurized Milk','Expiry':'11-July-2021','Qty': 0,'Unit':'Ltr','ProductImage': 'milk.jpg'}
)
db.Productlist.updateMany({},{$set: {"Price":"50.00"}})

db.Productlist.updateMany({},{$set: {"Active":true}})

db.Productlist.updateMany({},{$set: {"Qty":0}})

db.Productlist.updateMany({},{$set: {"ProductImage":"fruit3.jpg"}})

  db.Productlist.insertMany([{'ProductName':'Pasteurized Milk','Expiry':'11-July-2021','Qty': 0,'Unit':'Ltr','ProductImage': 'milk.jpg'}])

db.Productlist.insertMany([
      {
        "ProductName": "Double toned milk",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Ltr",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Bread",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Special Bread",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Brown Bread",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Eggs",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pieces",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Brown Eggs",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pieces",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Brown Eggs",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pieces",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Brown Eggs",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pieces",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Bread",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "Bread",
        "Expiry": "11-August-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "RawBread",
        "Expiry": "11-August-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "RawBread",
        "Expiry": "11-Sep-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "RawBread",
        "Expiry": "11-Sep-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "milk.jpg"
      },
      {
        "ProductName": "WheatBread",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "bread2.jpg"
      },
      {
        "ProductName": "WheatBread",
        "Expiry": "11-July-2021",
        "Qty": "0",
        "Unit": "Pack",
        "ProductImage": "bread2.jpg"
      }    
    ])


db.Productlist.find({ "_id": {"" } "60c84686da27373d34fbad82"})

db.Productlist.find()
// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.collection.drop();

// Insert a few documents into the sales collection.
db.sales.insertMany([
  { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
  { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
  { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
  { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
  { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
  { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
  { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
  { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
]);

// Run a find command to view items sold on April 4th, 2014.
db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
const aggregation = [
  { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
  { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.sales.aggregate(aggregation);
use FoodOrderDB
db.products.insert(
   [
     { _id: 20, item: "lamp", qty: 50, type: "desk" },
     { _id: 21, item: "lamp", qty: 20, type: "floor" },
     { _id: 22, item: "bulk", qty: 100 }
   ],
   { ordered: false }
)

db.Customer.insertOne(  
   {'mobile':'9144234232323','password':'231234123123',
   'name': 'Magesh Babu S','email':'magesh@gmail.com','doorno': '345',
   'address1': 'Perumal Street','address2': '3rd cross Street','area': 'Choolaimedu','location': 'Choolai'}
)

db.Customer.insertOne(  
   {'mobile':'9144234232323','password':'231234123123',
   'name': 'Magesh Babu S','email':'magesh@gmail.com'}
)

db.Customer.updateMany({},{$set: {"geolatlang":"12.0023423429,23.3434234234"}})

db.Customer.find()

db.Customer.drop();

db.CustomerAddress.insertOne(  
   { 'custid':'3453434',
     'doorno': '345','address1': 'Perumal Street','address2': '3rd cross Street',
     'area': 'Choolaimedu','location': 'Choolai',"geolatlang":"12.0023423429,23.3434234234"}
)

db.CustomerAddress.find()

db.CustomerAddress.updateMany({},{$set: {"custid":"60dc70bb15541034d46902f9"}})

db.CustomerAddress.find({'custid':'3453434'})

db.Admin.insert({
  'mobile':'9999999999',
  'password':'12345678',
   'name': 'Bhaaskar Ts',
   'email':'bhaaskar27@gmail.com'
})

db.Admin.find()

db.Location.insertMany([
  {'location':'Perambur'},{'location':'Anna Nagar'},{'location': 'Kilpauk'},{'location':'Purasaivakkam'},
      {'location':'Villivakkam'},{'location':'Choolai'},{'location':'Jamalia'},{'location':'Ayanavaram'}])

db.Location.find()


db.DeliveryMan.insertMany([
  {'location':'Perambur','name':'Sureshbabu','mobile':'9454574623','email':'deliveryman@gmail.com',
  'doorno':'342','address1':'address12342','address2':'Annanagar 1st street','area':'Annanagar east','Active':true }])

db.DeliveryMan.find()

db.Orders.insertMany([
  {'orderid':'20210600001',
  'orderdatetime':new Date(),
  'custid':'2323312313',
  'Products':[
    {'prodid':'3453453453','qty':32},
    {'prodid':'45345345345345','qty':45},
    {'prodid':'3467868768','qty':54},
  ],
  'deliverymanid':'23',
  'status':'Delivered' }])

db.Orders.find();

db.Orders.find( {"orderid": "20210600002" })

db.Orders.find( { _id: { $in: [ ObjectId("60d03c204d555a4fc81d2d28") ] } })


db.Orders.drop();
